%%%%%%
%%%%%%
%%%%%% This script generates all the figures for the target paper. You can
%%%%%% change which figures get generated by using the figs_to_run
%%%%%% variable.
%%%%%%
%%%%%%

%% fyi

% used: 
% get_required_files_and_products_from_matlab_file %.m to copy files
%%% that are called by this function into one folder:
%%% newplace = 'C:\Users\AliceBL\Dropbox\MurthyLab\TargetPaper\
% Scripts_For_TargetPaper_edits\';

%% Set up the directories
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% 

%When on a PC
addpath(genpath('C:\Users\AliceBL\Dropbox\FosterLab\scripts'))

%home
% dirs.dathome = 'H:\MurthyLab\LizData\';
% dirs.figdir = 'H:\MurthyLab\LizData\figures\ABL\combine_all_mice\';

%lab
dirs.dathome = 'F:\LizData\';
dirs.figdir = 'F:\LizData\figures\ABL\combine_all_mice\';
    
%When my laptop Mac
% addpath(genpath('/Users/alicebernerslee/Dropbox/FosterLab'))
% dirs.dathome = ...
%   '/Volumes/MacPC_Backu/MurthyLab/LizData/';
% dirs.figdir = ...
%   '/Volumes/MacPC_Backu/MurthyLab/LizData/figures/ABL/combine_all_mice/';

%Either way
dirs.training = [dirs.dathome ...
    'combine_all_mice_in_folder_raster_data_during_training_Odor_aligned'...
     '\raster_data_folder_full_trials_renamed\'];
dirs.probes = [dirs.dathome ...
    'combine_all_mice_in_folder_raster_data_probes_training_Odor_aligned'...
     '\raster_data_folder_full_trials_renamed\'];


%% How to run
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% 

saveout = false; % make true the first time you run it

%this is all the paper figures, 
% can subsample or add 0 to make all extra figs too
figs_to_run = [1:7 11 14:19]; 
    % 0 means figures that didn't make it in the paper
    % 1-7 are the main figures
    % 11-19 are supplemental figures 1-9 (only 1,4-9 are make here)



%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% General info and directories for rest of scripts. 
%%%%%%%%% Run first each time.

mousenames = {'Q';'R';'S';'T'};
if ~exist('neuronlistnew','var') || ~exist('neuron_info','var')
    disp('Starting get_neuron_info')
    [neuron_info, neuronlistnew] = get_neuron_info(mousenames,dirs);
    disp('Finished get_neuron_info')
end

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% neuron yield

%%%% This is used in the discussion.
%%%% How the yield goes down across days.
if sum(ismember(figs_to_run,0))>0
    neuron_yield
end

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% Behavior: Choice index, Lick latencies

%%% Accuracy and lick latency, including sessions that dont have neural
%%% recordings
% figure 1, 7
if sum(ismember(figs_to_run,[0 1 7]))>0
    disp('Starting plot_accuracy_oversessions_training')
    plot_accuracy_oversessions_training(dirs,neuron_info,figs_to_run)
end

%%% Accuracy and lick latency, for sessions that do have neural
%%% recordings
%figure 5, 7, S7, S8
if sum(ismember(figs_to_run,[0 5 7 17 18]))>0
    disp('Starting plot_accuracy_oversessions')
    plot_accuracy_oversessions(dirs,neuron_info,neuronlistnew,figs_to_run)
end

%%% Accurary for other odor cohorts, with different target mixtures used,
%%% for three other groups of mice
%figure S1
if sum(ismember(figs_to_run,[0 11]))>0
    disp('Starting TargetPaper_SupplementaryFigure1')
    TargetPaper_SupplementaryFigure1(dirs)
end

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% define parameters for selectivity

%200 window every 200ms
window = [200 200]; 
%start and end. 
% 1000ms before odor-on and 1000ms after odor-off
st_nd = [4100 7900]; 

% for plotting:
labeladd= [];
sm = window(2)./2; %for smoothing
midlabels = (st_nd(1):window(1):st_nd(2))-5000;
odorwindowlabel = [midlabels-window(2)/2; midlabels+window(2)/2]';

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% Single cell responses
% Make plots for individual neurons

%Figure 2, 3, 4, S4, S5
if sum(ismember(figs_to_run,[-1 0 2:3 5 14:15]))>0

    disp(['Starting single cell responses ...' ...
        '(calculate_plot_singleneuron_selectivity.m)'])
    toplotcells = true;
    % it takes ~20 min to generate all the examples in the paper
    
    % accumulate neurons that you wanna look at depending on which figures
    % you are looking at.

    lookat = [];    

    if sum(ismember(figs_to_run,2))>0
        lookat = [lookat 408 936 184];
    end
    
    if sum(ismember(figs_to_run,3))>0
        lookat = [lookat 162 697 77 ...
        1023 676 452];
    end
    
    if sum(ismember(figs_to_run,5))>0
        lookat = [lookat 247];
    end
    
    if sum(ismember(figs_to_run,14))>0
        lookat = [lookat 259 445 491];
    end

    if sum(ismember(figs_to_run,15))>0
        lookat = [lookat 387 633 335 92];
    end
    
    %to save out all of the neurons instead
    if sum(ismember(figs_to_run,[-1 0]))>0
        lookat = [];
    end

    num_avg_over = 1; % for down-sampling to the same number (shuffled
                       % num_avg_over times and mode is taken). This is 
                       % >1 when I am doing group stats (see later)

    calculate_plot_singleneuron_selectivity(dirs, neuron_info, ...
        neuronlistnew, mousenames, toplotcells, lookat, labeladd, ...
        odorwindowlabel,sm,num_avg_over);
end

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% Group data selectivity

% figures 2, 4, 5, s5, s6
if sum(ismember(figs_to_run,[0 2 4 5 14:16]))>0

    disp('Starting group data selectivity')

    % save out singledat for all neurons, or load it
    if saveout
        lookat = []; labeladd = [];
        toplotcells = false;
        % for down-sampling to the same number (shuffled
                       % num_avg_over times and mode is taken).                       
        num_avg_over = 50;

        singledat = calculate_plot_singleneuron_selectivity(dirs, ...
            neuron_info, neuronlistnew, mousenames, toplotcells, ...
            lookat, labeladd, odorwindowlabel,sm,num_avg_over);

            save([dirs.figdir '\singledat.mat'],'singledat')
    else
        disp('loading singledat.mat that was previously generated')
        load([dirs.figdir '\singledat.mat'],'singledat')
    end
    
    % Define significant cells    

    % Makes all_Neurons, all_BestSes, all_MeanSes
       [selectivity_dat,selectivity_params] = ...
        get_sig_neurons_all(odorwindowlabel, singledat.neuron_info, ...
        singledat.odorselective, singledat.odorselective_all, ...
        singledat.odorsel, singledat.odorsel_all);
    
    selectivity_params.sm = sm;
    
    
    %figure 2, 4
    if sum(ismember(figs_to_run,[0 2 4 14 15]))>0
        plot_Selectivity_Pie...
            (selectivity_dat,selectivity_params,dirs,figs_to_run)
    end

    %figure 2, 4, s4, s5
    if sum(ismember(figs_to_run,[0 2 4]))>0
        plot_Selectivity_UpDownDuration...
            (singledat,selectivity_dat,selectivity_params,dirs,figs_to_run) 
    end

    %figure 4
    if sum(ismember(figs_to_run,[0 4]))>0
        plot_Selectivity_Comparisons...
            (singledat,selectivity_dat,selectivity_params,dirs,figs_to_run)

        plot_Selectivity_Types...
            (singledat,selectivity_dat,selectivity_params,dirs,figs_to_run)  
    end
    
    %figure S5
    if sum(ismember(figs_to_run,[0 15]))>0
        plot_Selectivity_OdorOff...
            (singledat,selectivity_dat,selectivity_params,dirs,figs_to_run)
    end

    %figure 5, S6    
    if sum(ismember(figs_to_run,[0 5 16]))>0
        plot_Selectivity_proportions...
            (singledat,selectivity_params,dirs,figs_to_run)
    end

end

%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%%
%%%%%%%%% Correlation of population activity across stimulus type 
% - figures 6-7 - PV corr, decoding of target, probes and repeats

%figures 6 and 7
if sum(ismember(figs_to_run,[0 6 7 17]))>0
    
    disp('Starting population activity (calculate_plot_PVcorr.m)')



    %%%% Exclusions and paramters

    %has to be at least this many neurons in that session    
     % (excludes sessions with fewer than 4 neurons in it)     
    numNcutoff = 4; 

    %post-odor-on window
    postdattimes = [100 600];

    %If exclude lick neurons
    excludeLickNeurons = false; 
    
    %If excluding lick trials any trials with a lick
    % that comes before postdatimes(2) 
    % (e.g. 600ms post odor onset) is excluded  
    ExclLickTime = false;       

    %whether to run individual sessions  
    plotPVsessions = false;   
    if sum(ismember(figs_to_run,[0 7]))>0; plotPVsessions = true; end

    %whether to run the shuffle
    runshuffle = false;     
    if sum(ismember(figs_to_run,[0 6]))>0; runshuffle = true; end
    
    % how many trials to look-back to interpolate 
    % probe data point from T/NT trial PVcorr
    PVCorr_lookback = 10; 
    


    %%%% Run
    calculate_plot_PVcorr(dirs, neuron_info, neuronlistnew, ...
        excludeLickNeurons, numNcutoff, postdattimes, ExclLickTime, ...
        [],PVCorr_lookback,runshuffle,plotPVsessions,figs_to_run)
end

%%%% Exclutions that are defined within the script itself
% -If a neuron has at least 5 spikes in the pre (500ms before) and 
%   post (postdatimes) period then it is included
% -Any neuron with fewer than five spikes in the post-odor 
%   window (postdatimes) is excluded
% -All neuron's firing is z-scored
% -Decoding using classify.m
